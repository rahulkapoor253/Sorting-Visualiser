{"version":3,"sources":["Sorting/SortingAlgorithms.js","components/SortingVisualiser.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortArray","array","animations","length","console","log","tempArray","slice","runMergeSort","mainArray","startIndex","endIndex","middleIndex","Math","floor","i","j","k","push","runMerging","SortingVisualiser","props","generateRandomNumber","random","getRandomNumbers","arr","x","setState","dataArray","handleVisualise","state","arrayBars","document","getElementsByClassName","barStartId","barEndId","barStartIdStyle","style","barEndIdStyle","color","setTimeout","backgroundColor","barId","newHeight","height","this","className","onClick","map","val","idx","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1443a1c7.chunk.js","sourcesContent":["export function getMergeSortArray(array) {\n//merge sort and return sorted array;\nconst animations = [];//it reflects the animations for the main array;\nif(array.length <= 1) {\n    return array;\n}\nconsole.log(array);\nconst tempArray = array.slice();\nconsole.log(\"length of array: \" + array.length);\nrunMergeSort(array, 0, array.length - 1, tempArray, animations);\nreturn animations;\n}\n\nfunction runMergeSort(mainArray, startIndex, endIndex, tempArray, animations) {\nconsole.log(\"indexes are : \" + startIndex + \":\" + endIndex)\n    if(startIndex === endIndex) {\n        return;\n    }\n    else {\n    //to get lower value;\n    const middleIndex = Math.floor((startIndex + endIndex)/2);\n    \n    runMergeSort(tempArray, startIndex, middleIndex, mainArray, animations);\n    runMergeSort(tempArray, middleIndex + 1, endIndex, mainArray, animations);\n    runMerging(mainArray, startIndex, middleIndex, endIndex, tempArray, animations);\n    }\n}\n\nfunction runMerging(mainArray, startIndex, middleIndex, endIndex, tempArray, animations) {\n\n   let i=startIndex;\n   let j=middleIndex + 1;\n   let k = startIndex;//for main Array;\n   \n   while(i<=middleIndex && j<=endIndex) {\n    //we push the elements to change color of div;   \n    animations.push([i,j]);\n\n    //we push second time to rever color;\n    animations.push([i,j]);\n\n    if(tempArray[i] <= tempArray[j]) {\n            animations.push([k, tempArray[i]]);\n            //overwrite value in original array;\n            mainArray[k] = tempArray[i];\n            k++;\n            i++;\n       }\n    else {\n        animations.push([k, tempArray[j]]);\n        //overwrite val of j in main array;\n        mainArray[k] = tempArray[j];\n        k++;\n        j++;\n    }   \n\n   }\n\n   //if startindex reaches middle first;\n   while(j<=endIndex) {\n       animations.push([j,j]);\n       animations.push([j,j]);\n    animations.push([k, tempArray[j]]);\n\n    mainArray[k] = tempArray[j];\n    k++;\n    j++;\n   }\n\n   //if endindex reaches end first;\n   while(i<=middleIndex) {\n       animations.push([i,i]);\n       animations.push([i,i]);\n        animations.push([k, tempArray[i]]);\n       \n        mainArray[k] = tempArray[i];\n        k++;\n        i++;\n   }\n\n}\n","import React, {Component} from 'react';\nimport './SortingVisualiser.css';\nimport {getMergeSortArray} from '../Sorting/SortingAlgorithms';\n\nconst PRIMARY_COLOR = 'turquoise';\nconst SECONDARY_COLOR = 'black';\nconst MIN_BAR_HEIGHT = 10;\nconst MAX_BAR_HEIGHT = 700;\nconst TIMEOUT_TIMER_MS = 2;\n\nclass SortingVisualiser extends Component {\n\nconstructor(props) {\nsuper(props);\n\nthis.state = {\n    dataArray : [],\n}\n\n}\n\ngenerateRandomNumber = () => {\n    const number = Math.floor(MIN_BAR_HEIGHT + Math.random()*(MAX_BAR_HEIGHT-MIN_BAR_HEIGHT));\n    //console.log(number);\n    return number;\n}\n\ngetRandomNumbers = () => {\n   const arr = [];\n    for(let x=0;x<200;x++) {\n        arr.push(this.generateRandomNumber());\n   } \n\n   //set array to state;\n   this.setState({\n       dataArray : arr\n   })\n\n}\n\ncomponentDidMount() {\n    //fill the state with random numbers;\n    this.getRandomNumbers();\n}\n\nhandleVisualise = () => {\n    //visualise array bar logic after merge sort;\n    const animations = getMergeSortArray(this.state.dataArray);\n    //handle animations on array bars;\n    console.log(animations);\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    console.log(arrayBars);\n    for(let x=0;x<animations.length;x++) {\n        //on value = 2 it will change the height of the bar;\n        const isColorChange = (x % 3) !== 2;\n        if(isColorChange) {\n            const [barStartId, barEndId] = animations[x];\n            const barStartIdStyle = arrayBars[barStartId].style;\n            const barEndIdStyle = arrayBars[barEndId].style;\n\n            //change color when the set of 3 in animation appears first time;\n            const color = (x % 3) === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n            //console.log(color);\n            setTimeout(() => {\n                barStartIdStyle.backgroundColor = color;\n                barEndIdStyle.backgroundColor = color;\n            }, x * TIMEOUT_TIMER_MS);\n\n        }\n        else {\n            setTimeout(() => {\n                const [barId, newHeight] = animations[x];\n                const barIdStyle = arrayBars[barId].style;\n                barIdStyle.height = `${newHeight}px`;\n            }, x * TIMEOUT_TIMER_MS);\n        }\n\n    }\n\n}\n\nrender() {\n    const {dataArray} = this.state;\n    \n    return (\n        <div className=\"array-container\">\n            \n        <div className=\"top-container\">\n            <button onClick={this.handleVisualise} className=\"btn\">Visualise Sorting</button>\n            <button className=\"btn-new\" onClick={this.getRandomNumbers}>Generate new array</button>\n        </div>\n\n            {dataArray.map((val, idx) => (\n                 <div\n                 className=\"array-bar\"\n                 key={idx}\n                 style={{\n                   backgroundColor: PRIMARY_COLOR,\n                   height: `${val}px`,\n                }}>{val}</div>\n            ))}\n            \n        </div>\n    )\n}\n\n}\n\nexport default SortingVisualiser;","import React from 'react';\nimport SortingVisualiser from './components/SortingVisualiser';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualiser />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}